
static inline t_c     multiplication(int a, t_c b)
{
    return ((t_c){.re = a * b.re, .img = a * b.img});
}

static  inline t_c     custom_op(t_c z, t_data img)
{
    return (sum_i(pow_i(z, img.power, 1), sum_i(pow_i(z, 2, 0), (t_c){.re = img.c1 * z.re, .img = img.c2 * z.img})));
}

static  inline t_c     dcustom_op(t_c z, t_data img)
{
    return (sum_i(multiplication(img.power, pow_i(z, img.power - 1, 1)), (t_c){.re = img.c1, .img = img.c2}));
}

static inline int	custom_calc(t_c c, t_data img)
{
    t_c    next_c;
    t_c fz;
    t_c    dfz;
    t_c   fz2;
    int    i;

    next_c = (t_c){.re = c.re + 1, .img = c.img + 1};
    i = 0;
    while (i < img.max_iter)
    {
        fz = custom_op(next_c, img);
        dfz = dcustom_op(next_c, img);
        fz2 = division_i(fz, dfz);
        next_c = (t_c){.re = next_c.re - fz2.re, .img = next_c.img - fz2.img};
        if (module_sq(fz) < img.precision)
            break ;
        i++;
    }
    if (i == img.max_iter)
        return (i);
    if (module_sq(fz) < img.precision)
        return (i);
    return (i + img.logt[(int)(module_sq(fz) / img.precision)] / img.cos);
}